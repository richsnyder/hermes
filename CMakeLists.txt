CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0 FATAL_ERROR)

PROJECT(hermes LANGUAGES C CXX VERSION 0.3.4)

# Add custom modules to the module search path and mark them for installation.

LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/Modules)

# Determine whether or not to build the compiler.

SET(WITH_COMPILER_DOC "Build the Hermes compiler. Options are AUTO, ON, or OFF.")
SET(WITH_COMPILER "AUTO" CACHE STRING "${WITH_COMPILER_DOC}")
SET_PROPERTY(CACHE WITH_COMPILER PROPERTY STRINGS AUTO ON OFF)
SET(BUILD_COMPILER ${WITH_COMPILER})

IF (WITH_COMPILER STREQUAL OFF)
ELSEIF(WITH_COMPILER STREQUAL ON)
  IF(NOT Boost_FOUND)
    FIND_PACKAGE(Boost 1.60.0 REQUIRED)
  ENDIF()
ELSE()
  IF(NOT Boost_FOUND)
    FIND_PACKAGE(Boost 1.60.0)
  ENDIF()
  IF(Boost_FOUND)
    SET(BUILD_COMPILER ON)
  ELSE()
    SET(BUILD_COMPILER OFF)
  ENDIF()
ENDIF()

# Determine whether or not to build the C++ library.

SET(WITH_CPP_DOC "Build the C++ library. Options are AUTO, ON, or OFF.")
SET(WITH_CPP "AUTO" CACHE STRING "${WITH_CPP_DOC}")
SET_PROPERTY(CACHE WITH_CPP PROPERTY STRINGS AUTO ON OFF)
SET(BUILD_CPP ${WITH_CPP})

IF(WITH_CPP STREQUAL OFF)
ELSEIF(WITH_CPP STREQUAL ON)
  IF(NOT ZeroMQ_FOUND)
    FIND_PACKAGE(ZeroMQ REQUIRED)
  ENDIF()
ELSE()
  IF(NOT ZeroMQ_FOUND)
    FIND_PACKAGE(ZeroMQ)
  ENDIF()
  IF(ZeroMQ_FOUND)
    SET(BUILD_CPP ON)
  ELSE()
    SET(BUILD_CPP OFF)
  ENDIF()
ENDIF()

# Determine whether or not to build the Fortran library.

SET(WITH_FORTRAN_DOC "Build the Fortran library. Options are AUTO, ON, or OFF.")
SET(WITH_FORTRAN "AUTO" CACHE STRING "${WITH_FORTRAN_DOC}")
SET_PROPERTY(CACHE WITH_FORTRAN PROPERTY STRINGS AUTO ON OFF)
SET(BUILD_FORTRAN ${WITH_FORTRAN})

IF(WITH_FORTRAN STREQUAL OFF)
ELSEIF(WITH_FORTRAN STREQUAL ON)
  ENABLE_LANGUAGE(C Fortran)
  IF(NOT ZeroMQ_FOUND)
    FIND_PACKAGE(ZeroMQ REQUIRED)
  ENDIF()
ELSE()
  ENABLE_LANGUAGE(C Fortran OPTIONAL)
  IF(NOT ZeroMQ_FOUND)
    FIND_PACKAGE(ZeroMQ)
  ENDIF()
  IF(ZeroMQ_FOUND)
    SET(BUILD_FORTRAN ON)
  ELSE()
    SET(BUILD_FORTRAN OFF)
  ENDIF()
ENDIF()

# Determine whether or not to build the Python library.

SET(WITH_PYTHON_DOC "Build the Python library. Options are AUTO, ON, or OFF.")
SET(WITH_PYTHON "AUTO" CACHE STRING "${WITH_PYTHON_DOC}")
SET_PROPERTY(CACHE WITH_PYTHON PROPERTY STRINGS AUTO ON OFF)
SET(BUILD_PYTHON ${WITH_PYTHON})

IF(WITH_PYTHON STREQUAL OFF)
ELSEIF(WITH_PYTHON STREQUAL ON)
  IF(NOT PYTHONINTERP_FOUND)
    FIND_PACKAGE(PythonInterp REQUIRED)
  ENDIF()
  IF(NOT Pip_FOUND)
    FIND_PACKAGE(Pip)
  ENDIF()
ELSE()
  IF(NOT PYTHONINTERP_FOUND)
    FIND_PACKAGE(PythonInterp)
  ENDIF()
  IF(NOT Pip_FOUND)
    FIND_PACKAGE(Pip)
  ENDIF()
  IF(PYTHONINTERP_FOUND)
    SET(BUILD_PYTHON ON)
  ELSE()
    SET(BUILD_PYTHON OFF)
  ENDIF()
ENDIF()

# Determine whether or not to build the documentation.

SET(WITH_DOCS "Build the documentation. Options are AUTO, ON, or OFF.")
SET(WITH_DOCS "AUTO" CACHE STRING "{WITH_DOCS}")
SET_PROPERTY(CACHE WITH_DOCS PROPERTY STRINGS AUTO ON OFF)
SET(BUILD_DOCS ${WITH_DOCS})

IF(WITH_DOCS STREQUAL OFF)
ELSEIF(WITH_DOCS STREQUAL ON)
  FIND_PACKAGE(Asciidoctor REQUIRED)
ELSE()
  FIND_PACKAGE(Asciidoctor)
  IF(Asciidoctor_FOUND)
    SET(BUILD_DOCS ON)
  ELSE()
    SET(BUILD_DOCS OFF)
  ENDIF()
ENDIF()

# Determine whether or not to build the unit tests.

OPTION(BUILD_TESTS "Build unit tests." OFF)

IF (BUILD_TESTS)
  ENABLE_TESTING()
ENDIF()

# Add the project subdirectories.

IF(BUILD_COMPILER)
  ADD_SUBDIRECTORY(compiler)
ENDIF()
IF(BUILD_CPP)
  ADD_SUBDIRECTORY(cpp)
ENDIF()
IF(BUILD_FORTRAN)
  ADD_SUBDIRECTORY(fortran)
ENDIF()
IF(BUILD_PYTHON)
  ADD_SUBDIRECTORY(python)
ENDIF()
IF(BUILD_TESTS)
  ADD_SUBDIRECTORY(tests)
ENDIF()
IF (BUILD_DOCS)
  ADD_SUBDIRECTORY(doc)
ENDIF()

# Print a report on the configuration.

INCLUDE(Reporting)
CONFIGURATION_REPORT()
